#pragma once

#include <wtf/Assertions.h>
#include <wtf/FastMalloc.h>
#include <wtf/Noncopyable.h>

namespace WTF {

	// This base class holds the non-template methods and attributes.
	// The RefCounted class inherits from it reducing the template bloat
	// generated by the compiler (technique called template hoisting).
	class RefCountedBase {
	public:
		void ref() const
		{
			++m_refCount;
		}

		bool hasOneRef() const
		{
			return m_refCount == 1;
		}

		unsigned refCount() const
		{
			return m_refCount;
		}

		void relaxAdoptionRequirement()
		{

		}

	protected:
		RefCountedBase()
			: m_refCount(1)
		{
		}

		~RefCountedBase()
		{
		}

		// Returns whether the pointer should be freed or not.
		bool derefBase() const
		{

			ASSERT(m_refCount);
			unsigned tempRefCount = m_refCount - 1;
			if (!tempRefCount) {
				return true;
			}
			m_refCount = tempRefCount;
			return false;
		}

	private:


		mutable unsigned m_refCount;
	};

	template<typename T> class RefCounted : public RefCountedBase {
		WTF_MAKE_NONCOPYABLE(RefCounted); WTF_MAKE_FAST_ALLOCATED;
	public:
		void deref() const
		{
			if (derefBase())
				delete static_cast<const T*>(this);
		}

	protected:
		RefCounted() { }
		~RefCounted()
		{
		}
	};

} // namespace WTF

using WTF::RefCounted;
